name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  format:
    runs-on: ubuntu-latest
    name: Format

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust (stable)
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt

    - name: Check formatting
      run: cargo fmt --all -- --check

  lint:
    needs: format
    strategy:
      fail-fast: false
      matrix:
        rust: ["1.90.0", "stable"]
        features:
          - name: "all-features"
            flags: "--all-features"
          - name: "no-features"
            flags: "--no-default-features"
          - name: "mip04-only"
            flags: "--no-default-features --features mip04"

    runs-on: ubuntu-latest
    name: Lint (${{ matrix.rust }}, ${{ matrix.features.name }})

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust (${{ matrix.rust }})
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: clippy

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.rust }}-${{ matrix.features.name }}

    - name: Install system dependencies
      run: sudo apt-get update && sudo apt-get install -y pkg-config

    - name: Run clippy
      run: cargo +${{ matrix.rust }} clippy --all-targets ${{ matrix.features.flags }} --no-deps -- -D warnings

  docs:
    needs: format
    strategy:
      fail-fast: false
      matrix:
        rust: ["1.90.0", "stable"]

    runs-on: ubuntu-latest
    name: Documentation (${{ matrix.rust }})

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust (${{ matrix.rust }})
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.rust }}-docs

    - name: Install system dependencies
      run: sudo apt-get update && sudo apt-get install -y pkg-config

    - name: Check documentation
      run: cargo +${{ matrix.rust }} doc --all-features --no-deps --document-private-items
      env:
        RUSTDOCFLAGS: "-D warnings"

  test:
    needs: [format, lint]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, macos-14]
        rust: ["1.90.0", "stable"]
        features:
          - name: "all-features"
            flags: "--all-features"
          - name: "no-features"
            flags: "--no-default-features"
          - name: "mip04-only"
            flags: "--no-default-features --features mip04"

    runs-on: ${{ matrix.os }}
    name: Test (${{ matrix.os }}, ${{ matrix.rust }}, ${{ matrix.features.name }})

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust (${{ matrix.rust }})
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.os }}-${{ matrix.rust }}-${{ matrix.features.name }}

    - name: Install system dependencies
      if: runner.os == 'Linux'
      run: sudo apt-get update && sudo apt-get install -y pkg-config

    - name: Check
      run: cargo +${{ matrix.rust }} check --all-targets ${{ matrix.features.flags }}

    - name: Build
      run: cargo +${{ matrix.rust }} build --all-targets ${{ matrix.features.flags }}

    - name: Test
      run: cargo +${{ matrix.rust }} test --all-targets ${{ matrix.features.flags }}

    - name: Test docs
      if: matrix.features.name == 'all-features'
      run: cargo +${{ matrix.rust }} test --doc ${{ matrix.features.flags }}
